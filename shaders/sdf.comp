#version 440 core
#define deltaN 0.01
#define delta 0.000001
#define deltaSunHit 0.01
#define deltaAway 0.01
#define deltaSun 0.001
#define crispyShadows 0.05
#define deltaLocalMax 0.001
#define PI 3.1415927
#define DEBUG true
#define DEBUG_PIXEL ivec2(400, 512)
writeonly uniform image2D framebuffer;//rgba32f
//layout(binding = 1) uniform image2D object_map;//rgba32f
//layout(binding = 2) uniform image2D object_texture;//rgba32f
//layout(binding = 1) uniform sampler2D noise;

struct struct_obj_data{
    vec3 origin;
    vec3 normal;
};

layout(std430, binding = 3) readonly buffer obj_data {
    struct_obj_data data[];
} Obj_Data;


struct struct_obj_index{
    vec3 midpoint;
    int branch_index[8];
    int data_index;
};

layout(std430, binding = 2) readonly buffer obj_index {
    struct_obj_index data[];
} Obj_Index;


struct Node{
    int chilren[8];
};

struct Plane{
    vec3 origin;
    vec3 normal;
};

Plane aprx_sphere[32] = {
{ { 0.678598, -0.678598, 0.281085 }, { 0.678598, -0.678598, 0.281085 } },
{ { 0.281085, -0.678598, 0.678598 }, { 0.281085, -0.678598, 0.678598 } },
{ { -0.281085, -0.678598, 0.678598 }, { -0.281085, -0.678598, 0.678598 } },
{ { -0.678598, -0.678598, 0.281085 }, { -0.678598, -0.678598, 0.281085 } },
{ { -0.678598, -0.678598, -0.281085 }, { -0.678598, -0.678598, -0.281085 } },
{ { -0.281084, -0.678598, -0.678598 }, { -0.281084, -0.678598, -0.678598 } },
{ { 0.281085, -0.678598, -0.678598 }, { 0.281085, -0.678598, -0.678598 } },
{ { 0.678598, -0.678598, -0.281084 }, { 0.678598, -0.678598, -0.281084 } },
{ { 0.862856, -0.357407, 0.357407 }, { 0.862856, -0.357407, 0.357407 } },
{ { 0.357407, -0.357407, 0.862856 }, { 0.357407, -0.357407, 0.862856 } },
{ { -0.357407, -0.357407, 0.862856 }, { -0.357407, -0.357407, 0.862856 } },
{ { -0.862856, -0.357407, 0.357407 }, { -0.862856, -0.357407, 0.357407 } },
{ { -0.862856, -0.357407, -0.357407 }, { -0.862856, -0.357407, -0.357407 } },
{ { -0.357406, -0.357407, -0.862856 }, { -0.357406, -0.357407, -0.862856 } },
{ { 0.357407, -0.357407, -0.862856 }, { 0.357407, -0.357407, -0.862856 } },
{ { 0.862856, -0.357407, -0.357406 }, { 0.862856, -0.357407, -0.357406 } },
{ { 0.862856, 0.357407, 0.357407 }, { 0.862856, 0.357407, 0.357407 } },
{ { 0.357407, 0.357407, 0.862856 }, { 0.357407, 0.357407, 0.862856 } },
{ { -0.357407, 0.357407, 0.862856 }, { -0.357407, 0.357407, 0.862856 } },
{ { -0.862856, 0.357407, 0.357407 }, { -0.862856, 0.357407, 0.357407 } },
{ { -0.862856, 0.357407, -0.357407 }, { -0.862856, 0.357407, -0.357407 } },
{ { -0.357406, 0.357407, -0.862856 }, { -0.357406, 0.357407, -0.862856 } },
{ { 0.357407, 0.357407, -0.862856 }, { 0.357407, 0.357407, -0.862856 } },
{ { 0.862856, 0.357407, -0.357406 }, { 0.862856, 0.357407, -0.357406 } },
{ { 0.678598, 0.678598, 0.281085 }, { 0.678598, 0.678598, 0.281085 } },
{ { 0.281085, 0.678598, 0.678598 }, { 0.281085, 0.678598, 0.678598 } },
{ { -0.281085, 0.678598, 0.678598 }, { -0.281085, 0.678598, 0.678598 } },
{ { -0.678598, 0.678598, 0.281085 }, { -0.678598, 0.678598, 0.281085 } },
{ { -0.678598, 0.678598, -0.281085 }, { -0.678598, 0.678598, -0.281085 } },
{ { -0.281084, 0.678598, -0.678598 }, { -0.281084, 0.678598, -0.678598 } },
{ { 0.281085, 0.678598, -0.678598 }, { 0.281085, 0.678598, -0.678598 } },
{ { 0.678598, 0.678598, -0.281084 }, { 0.678598, 0.678598, -0.281084 } }
};

uniform vec3 eye;
uniform vec3 ray00;
uniform vec3 ray01;
uniform vec3 ray10;
uniform vec3 ray11;
uniform vec3 bound_min;
uniform vec3 bound_max;
uniform int levels;

vec3 sunpos = vec3(1.0, 2, 0.2) * 5;
vec3 suncol = vec3(1.0, 1.0, 1.0);
vec3 ambient = vec3(0.12, 0.17, 0.2);
float sunsize = 0.1;


float smin(float x, float y, float smoothness){
    float h = max(smoothness-abs(x-y), 0.0)/smoothness;
    return min(x, y) - h*h*h*smoothness*(1.0/6.0);
}

float sd_aprx_sphere(vec3 pt){
    vec3 dir = normalize(pt);
    float pitch = asin(dir.y);
    float yaw = atan(dir.z, dir.x) + PI;

    int p = int((pitch + PI / 2) / (PI / 4));
    int y = int((yaw - 0) / (2 * PI / 8));
    int index = p * 4 + y;

    float minDist  = 0.0;
    if (index >= 15)
    return 1000.0;
    /*int i = 0;
    for(i = 0; i < 32; i++){
        vec3 origin = aprx_sphere[i].origin;
        vec3 normal = aprx_sphere[i].normal;
        minDist = max(minDist, dot(pt - origin, normal));
    }*/

    if (index >= 0 && index < 32){
        vec3 origin = aprx_sphere[index].origin;
        vec3 normal = aprx_sphere[index].normal;

        return dot(pt - origin, normal);
        //return length(pt - origin)-0.1;
    } else return 10000.0;
    //return dot(pt - origin, normal);
    //return minDist;
}

float sdInfiniplane(vec3 p, vec3 o, vec3 n)
{
    vec3 dv = p - o;
    float dist = dot(dv, n);
    return dist;
}

float sdCeby(vec3 p, vec3 o, float s)
{
    //vec3 d = abs(p-o) - s;
    //return max(max(d.x, d.y), d.z);
    vec3 d = abs(p-o) - s;
    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));
}

float sdSphere(vec3 p, vec3 o, float s)
{
    return length(p-o)-s;
}

float intersectSDF(float distA, float distB) {
    return max(distA, distB);
}

float unionSDF(float distA, float distB) {
    return min(distA, distB);
}

float differenceSDF(float distA, float distB) {
    return max(distA, -distB);
}

float dist_obj(vec3 p){
    float minDist  = 1000.0f;
    vec3 cb_min = bound_min;
    vec3 cb_max = bound_max;
    vec3 mid = (cb_max + cb_min) * 0.5;

    int index = 0;
    int node = 0;

    int data_index = 0;

    for (int i = 0; i < max_depth; i++){ //FIXME: add me as uniform
        index = 0;
        index += p.x < mid.x ? 1 : 0;
        index += p.y < mid.y ? 2 : 0;
        index += p.z < mid.z ? 4 : 0;

        if(Obj_Index.data[node].branch_index[index] == 0)
            data_index = Obj_Index.data[node].data_index;
        else
            node = Obj_Index.data[node].branch_index[index];
    }

    return sdInfiniplane(Obj_Data.data[data_index].origin, Obj_Data.data[data_index].normal);
}

//scDist(vec3 p) must have the same objects and parameters as scDist(vec3 p, out vec3 color)
float scDist(vec3 p)
{
    float minDist = intersectSDF(
    sdCeby(p, vec3(0, 0.0, 0), 1.0),
    sdSphere(p, vec3(0, 0.0, 0), 1.3)
    );

    float plane = intersectSDF(
    sdCeby(p, vec3(0, 0.0, 0), 10.0),
    sdInfiniplane(p, vec3(0, -1.0, 0), vec3(0, 1, 0))
    );


    minDist = min(minDist, plane);
    //float minDist = plane;
    minDist = min(minDist, sdSphere(p, vec3(0, 3.0, 0), 1.0));
    //minDist = min(minDist, sd_aprx_sphere(p));
    minDist = min(minDist, dist_obj(p));
    minDist = min(minDist, sdSphere(p, sunpos, sunsize));

    return minDist;
}

void obj_comp(float minDist, float lastminDist, vec3 color, int object, inout vec3 o_color, inout int o_object){
    if (minDist < lastminDist){
        o_color = color;
        o_object = object;
    }
}

//objects with different colors implemented here
float scDist(vec3 p, out vec3 color, out int object)
{
    float lastminDist  = 1000.0;
    vec3 final_color = vec3(1.0, 0.0, 0.0);
    int final_object = 0;

    //object
    float minDist = intersectSDF(
    sdCeby(p, vec3(0, 0.0, 0), 1.0),
    sdSphere(p, vec3(0, 0.0, 0), 1.3)
    );

    //TODO: put properties into struct indexed by object int
    //if its ditance is used update the final color with its color
    obj_comp(minDist, lastminDist, vec3(0.8), 1, final_color, final_object);
    lastminDist = minDist;

    float plane = intersectSDF(
    sdCeby(p, vec3(0, 0.0, 0), 10.0),
    sdInfiniplane(p, vec3(0, -1.0, 0), vec3(0, 1, 0))
    );

    minDist = min(minDist, plane);
    //float minDist = plane;
    obj_comp(minDist, lastminDist, vec3(0.019, 0.509, 1.0), 2, final_color, final_object);
    lastminDist = minDist;


    minDist = min(minDist, sdSphere(p, vec3(0, 3.0, 0), 1.0));
    obj_comp(minDist, lastminDist, vec3(10, 0, 0), 2, final_color, final_object);
    lastminDist = minDist;

    /*minDist = min(minDist, sd_aprx_sphere(p));
    obj_comp(minDist, lastminDist, vec3(0.5, 0.7, 0.9), 4, final_color, final_object);
    lastminDist = minDist;*/

    /* my obj */
    minDist = min(minDist, dist_obj(p));
    obj_comp(minDist, lastminDist, vec3(0.5, 0.5, 0.7), 5, final_color, final_object);
    lastminDist = minDist;

    minDist = min(minDist, sdSphere(p, sunpos, sunsize));
    obj_comp(minDist, lastminDist, suncol, 3, final_color, final_object);
    lastminDist = minDist;


    color = final_color;
    object = final_object;
    return minDist;
}

vec3 normal(vec3 p){
    vec3 res = vec3(
    scDist(vec3(p.x + deltaN, p.y, p.z)) - scDist(vec3(p.x - deltaN, p.y, p.z)),
    scDist(vec3(p.x, p.y + deltaN, p.z)) - scDist(vec3(p.x, p.y - deltaN, p.z)),
    scDist(vec3(p.x, p.y, p.z + deltaN)) - scDist(vec3(p.x, p.y, p.z - deltaN))
    );

    return normalize(res);
}

float map(float x, float as, float ae, float bs, float be)
{
    return (x-as)/(ae-as)*(be-bs) + bs;
}

float mapc(float x, float as, float ae, float bs, float be)
{
    return clamp((x-as)/(ae-as)*(be-bs) + bs, bs, be);
}

/*
intensity I at distance x = 0
spread of light is in [0,1) which maps to [0,pi/2)
x is distance
*/
float falloff(float x, float I, float spread)
{
    if (x < 0.0) return I;
    if (spread > 0.999999) return 0.0;

    return I / pow(1.0 + x * tan(spread * PI / 2.0), 2.0);
}

/*
pre: intensity(parameter) != intesity(lint) in description

Le "David Light Model" axioms:

* At intesity 0.0 any color should be black
* At intensity 1.0 any color should be white
* Light intesity is directly proportional to 1/r^2 from which I use the [1.0, 8.0] region
* Raw RGB data is received therefore a gamma correction is needed #sRGB
* When should I blend the color to white? Hmm.. Let's apply Pareto => pow(lint, 35.0) which is almost 0 at 80% 1 at 100%
* Final color shoudn't be brighter than the light => surface * light
* Assume that multiplying a color by its intensity is a good way to control the lightness
- forgot about normals T_T

post:oh my god a blue plane actually looks green under yellow light without more debugging
*/

/*For Debigging purposes*/
int curPix = 0;
void drawbar(float value, float scale, vec3 color)
{
    int pixy = int(value * scale);
    for (int y = 0; y < pixy && y < 1024; y++)
    imageStore(framebuffer, ivec2(curPix, y), vec4(color, 1.0));
    curPix++;
}

vec3 ray_cast(vec3 p, vec3 dir){
    return vec3(0);
}

vec3 sundist(vec3 p)
{

    vec3 cp = p;
    float minDist = 1000.0;
    float dist_to_obj = 0.0;
    vec3 dirSun = normalize(sunpos - p);

    float tdist = 0.0;//total distance travelled by the ray
    float calctdist = sdSphere(cp, sunpos, sunsize);//total distance if not blocked by an object
    float cdist = 0.0;//current distance from current point to closest surface
    float lastcdist = 0.0;

    vec3 cur_obj_color = vec3(0.8, 0.5, 0.2);//current object(closest one) color
    int cur_obj = 0;
    int first = 0;

    float shadow = 1.0;

    for (int i = 0; i < 200; i++)//>50
    {
        cdist = scDist(cp, cur_obj_color, cur_obj);

        cp += min(cdist, crispyShadows) * dirSun;
        tdist += min(cdist, crispyShadows);

        if (cdist < lastcdist)
        first = 1;

        lastcdist = cdist;


        if (cur_obj != 3 && first == 1){
            minDist = min(cdist, minDist);
            shadow = min(shadow, smoothstep(0.0, 1.0, atan(cdist, tdist)/(PI*0.04)));//min(shadow, 30.0*cdist/tdist);
            dist_to_obj = length(cp - p);
            if (DEBUG && gl_GlobalInvocationID.xy == DEBUG_PIXEL)
            {
                //drawbar(cdist, 400.0, vec3(0.7, 0.1, 0.0));
            }
        }

        if (DEBUG && gl_GlobalInvocationID.xy == DEBUG_PIXEL)
        {
            //drawbar(pow(2.0, i), 400.0, vec3(0.0, 0.0, 1.0));
            //if(2.0*lastcdist < cdist + 0.2)
            /*if (foundFLocalMax)
            drawbar(cdist, 400.0, vec3(1.0, 0.0, 0.0));
            else if (foundFLocalMin)
            drawbar(cdist, 400.0, vec3(0.0, 1.0, 0.0));
            else*/
            vec3 bar_col = cur_obj == 3 ? vec3(0.0, 0.0, 0.0) : vec3(0.0, 0.1, 0.7);
            //drawbar(cdist, 400.0, bar_col);
            //drawbar(cdist, 400.0, bar_col);

        }

        //if(foundFLocalMax) break;
        if (cdist < delta)//there's a hit, pitch black
        break;
    }

    tdist = length(p-cp);
    float is_hit = calctdist -  tdist < deltaSunHit ? 1.0 : 0.0;

    return vec3(is_hit, tdist, shadow);
}

vec3 skycolor(vec3 dir){
    vec3 horizon = vec3(0.05, 0.08, 0.15);//vec3(0.788, 0.855, 0.95);
    vec3 zenith = vec3(0.32, 0.70, 0.97);

    float blend = max(0.0, dot(dir, vec3(0.0, 1.0, 0.0)));

    return mix(horizon, zenith, blend);
}

vec4 trace(vec3 origin, vec3 dir) {

    //return vec4(0.88, 0.0, 0.08, 1.0);
    vec3 camdir = dir;
    vec3 cp = origin;//current point
    float cdist = 0.0;//current distance from current point to closest surface
    float tdist = 0.0;//total distance travelledby the ray

    float lastHit = 0.0;//last hit distance
    vec3 finalColor = skycolor(dir);
    vec3 cur_obj_color = vec3(0.8, 0.5, 0.2);//current object(closest one) color
    int cur_obj = 0;
    float dDist = 0;//distance covered by taking the last step
    float collisions = 0.0;//number of collisions so far

    float fresnel = 0;

    for (int i = 0; i < 100 && tdist < 50.0; i++)
    {
        cdist = scDist(cp, cur_obj_color, cur_obj);
        cp = cp + cdist * dir;
        tdist += cdist;

        vec3 norm = normal(cp);

        if (cur_obj_color.x > 1.0)//special coloring mode for normals
        cur_obj_color = (norm + 1.0) * 0.5;

        if (cdist < delta)//close enough to an object consider it a collision
        {
            collisions += 1.0;

            //return vec4(currColor / tdist , 1.0);
            dDist = tdist - lastHit;
            dDist = dDist * dDist;
            lastHit = tdist;


            float blend = min(0.5, 1.0 / dDist);

            vec3 sun_dir = normalize(sunpos - cp);
            vec3 sun_info = sundist(cp - deltaSun * dir);
            vec3 col_amb = ambient;
            float shadow = sun_info.z;//TODO: do the shadow math
            //vec3 col_sun = suncol * falloff(sun_info.y, 200.0, 0.5) * dot(norm, sun_dir) * shadow;
            vec3 col_sun = suncol * falloff(sun_info.y, 50.0, 0.3) * dot(norm, sun_dir) * shadow.x * shadow;


            vec3 direct_color = cur_obj_color * (col_amb + col_sun);
            direct_color = cur_obj == 3 ? cur_obj_color : direct_color;


            // if first collision
            if (collisions < 1.5){
                finalColor = direct_color;
                fresnel =  pow(1.0 - dot(norm, -dir), 5);

                //finalColor = shadow * vec3(1.0);

            } else {
                finalColor += (0.2 + 0.8 * fresnel) * dot(norm, -dir) * direct_color;
            }


            //finalColor = vec3(illum.x);
            //return vec4(finalColor, 1.0);




            dir = normalize(reflect(dir, norm));
            cp = cp + deltaAway * dir;//run away from the current point to avoid multiple tiny iterations


            if (collisions > 1.5f)//0.5 = first hit, 1.5 = second hit, etc.
            break;//stop at nth bounce
            //return vec4(vec3(1.0,1.0,1.0) * (1.0 - dDist * 0.01), 1.0);//hit distance,
            //return vec4(currColor, 1.0);//hit color
            //return vec4((norm + 1.0) * 0.5 , 1.0);//hit normal
            //return vec4((dir + 1.0) * 0.5 , 1.0);//hit new direction
        }


    }
    //return vec4(1.0,0.0,0.0, 1.0);

    //return vec4(collisions*vec3(0.1,0.2,0.1),1.0);

    return vec4(finalColor, 1.0);
}



layout (local_size_x = 8, local_size_y = 8) in;

void main(void) {
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    ivec2 size = imageSize(framebuffer);
    if (pix.x >= size.x || pix.y >= size.y) {
        return;
    }
    vec2 pos = vec2(pix) / vec2(size.x, size.y);
    vec3 dir = mix(mix(ray00, ray01, pos.y), mix(ray10, ray11, pos.y), pos.x);
    dir = normalize(dir - eye);

    vec4 color = vec4(1.0, 0.0, 0.0, 1.0);
    color = trace(eye, dir);
    //color.xyz = pow(color.xyz, vec3(1.2));//adjust gamma
    if (DEBUG && pix == DEBUG_PIXEL)
    imageStore(framebuffer, pix, vec4(1.0, 0.5, 0.5, 1.0));
    else
    imageStore(framebuffer, pix, color);


    //if (DEBUG)
    //imageStore(framebuffer, pix, vec4(dir, 1.0));

}
